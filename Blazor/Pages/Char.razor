@page "/char/{CharacterIdParameter}"

@using GloomhavenAbilityManager.Logic.Contracts.Data
@using GloomhavenAbilityManager.Logic.Contracts.Interfaces
@inject IAbilityCardService CardService
@inject ICharacterClassService ClassService
@inject ICharacterService CharacterService

@if (character == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>@character.Name (@characterClass.Name)</h1>
    <p>Available Cards: @characterClass.NumberOfCards</p>

    <h2>All cards</h2>
    
    @for (int row = 0; row <= availableCards.Count / cardsPerRow; row++)
    {
        <tr>
  
        @for (int col = 0; col < cardsPerRow; col++)
        {
            @if (row * cardsPerRow + col < availableCards.Count)
            {
                var card = availableCards[row * cardsPerRow + col];
                <td>
                    <input type="checkbox" checked="@card.IsSelected" @onchange="eventArgs => { OnCardIsSelectedChanged(card, (bool) eventArgs.Value); }" /> 
                    @availableCards[row * cardsPerRow + col].Name 
                    <br><img src="@card.ImagePath" height="320" width="240">
                </td>
            }
        }
        </tr>  
    } 

    <h2>Selected cards (@selectedCards.Count / @characterClass.NumberOfCards)</h2>
    <button @onclick="SaveCards">Save selected cards</button>
    @for (int row = 0; row <= selectedCards.Count / cardsPerRow; row++)
    {
        <tr>
  
        @for (int col = 0; col < cardsPerRow; col++)
        {
            @if (row * cardsPerRow + col < selectedCards.Count)
            {
                var card = selectedCards[row * cardsPerRow + col];
                <td>@card.Name<br><img src="@card.ImagePath" height="320" width="240"></td>
            }
        }
        </tr>  
    } 
}

@code {

    private string characterIdParameter = "0";

    [Parameter]
    public string CharacterIdParameter 
    { 
        get 
        {
            return characterIdParameter;
        } 

        set
        {
            characterIdParameter = value;
            OnCharacterIdParameterChanged();
        } 
    } 

    private int cardsPerRow = 6;

    private Character character;
    private CharacterClass characterClass;

    private List<AbilityCard> availableCards;
    private List<AbilityCard> selectedCards;

    private void OnCharacterIdParameterChanged()
    {
        if (!int.TryParse(CharacterIdParameter, out int _id))
        {
            _id = 0;
        }

        character = CharacterService.GetCharacter(_id);
        characterClass = ClassService.GetClass(character.ClassId);
        var tempAvailableCards = new List<AbilityCard>(character.AvailableCards);
        tempAvailableCards.ForEach( c => c.IsSelected = character.SelectedCards.Any( card => card.Id == c.Id));
        availableCards = tempAvailableCards;
        UpdateSelecedCards();
    }

    private void SaveCards()
    {
        character.SelectedCards = new List<AbilityCard>(availableCards.Where(c => c.IsSelected));
        CharacterService.UpdateCharacter(character);
    }

    private void OnCardIsSelectedChanged(AbilityCard card, bool newValue)
    {
        card.IsSelected = newValue;
        UpdateSelecedCards();
    }

     private void OnCardIsSelectedChanged2(ChangeEventArgs e)
    {
      
        UpdateSelecedCards();
    }

    private void UpdateSelecedCards()
    {
        selectedCards = availableCards.Where(c => c.IsSelected).ToList();
    }
}
