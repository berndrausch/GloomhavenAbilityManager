@page "/chars/"

@using System.Linq;
@using GloomhavenAbilityManager.Logic.Contracts.Data
@using GloomhavenAbilityManager.Logic.Contracts.Interfaces
@inject ICharacterService CharacterService
@inject ICharacterClassService ClassService

<h1>Characters</h1>

@if (characters == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Class</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var character in characters)
            {
            <tr>
                <td><a href=@($"char\\{character.Id}")>@character.Name</a></td>
                <td><a href=@($"class\\{character.ClassId}")>@ClassService.GetClass(character.ClassId).Name</a></td>
            </tr>
            }
                <tr>
                    <td><input id="name" @bind="newCharacter.Name" /></td>
                    <td><select  @bind="newCharacter.ClassId" class="form-control">
                        @foreach (var cls in ClassService.GetClasses())
                        {
                            <option value="@cls.Id">@cls.Name</option>
                        }
                    </select></td>
                    <td><button @onclick="OnNewCharacter">Create</button></td>
                </tr>
         
        </tbody>

    </table>
}

@code {
    private IEnumerable<Character> characters;

    private Character newCharacter = new Character();

    protected override void OnInitialized()
    {
        UpdateCharacters();
    }

    private void UpdateCharacters() => characters = CharacterService.GetCharacters().OrderBy(c => c.Name);


    private void OnNewCharacter()
    {
        Console.WriteLine(nameof(OnNewCharacter));
        CharacterService.AddCharacter(newCharacter);
        newCharacter = new Character();
        UpdateCharacters();
    }
}
