@page "/class/{ClassIdParameter}"

@using GloomhavenAbilityManager.Logic.Contracts.Data
@using GloomhavenAbilityManager.Logic.Contracts.Interfaces
@inject IAbilityCardService CardService
@inject ICharacterClassService ClassService

<h1>@characterClass.Name</h1>

<p>Number of cards: <b>@characterClass.NumberOfCards</b></p>

@if (cards == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Level</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var card in cards)
            {
            <tr>
                <td>@card.Id</td>
                <td><a href=@($"card\\{card.Id}")>@card.Name</a></td>
                <td>@card.Level</td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<AbilityCard> cards;

    private string classIdParameter = "0";

    [Parameter]
    public string ClassIdParameter
    {
        get
        {
            return classIdParameter;
        }

        set
        {
            classIdParameter = value;
            OnClassIdParameterChanged();
        }
    }

    private CharacterClass characterClass;

    protected override void OnInitialized()
    {
        OnClassIdParameterChanged();
    }

    private void OnClassIdParameterChanged()
    {
        if (! int.TryParse(ClassIdParameter, out int id))
        {
            id = 0;
        }

        cards = CardService.GetCharacterClassCards(id);
        characterClass = ClassService.GetClass(id);
    }
}
