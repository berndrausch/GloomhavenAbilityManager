@page "/charedit/{CharacterIdParameter}"

@using GloomhavenAbilityManager.Logic.Contracts.Data
@using GloomhavenAbilityManager.Logic.Contracts.Interfaces
@inject IAbilityCardService CardService
@inject ICharacterClassService ClassService
@inject ICharacterService CharacterService

@if (character == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>@character.Name (@characterClass.Name)</h1>

    <table>
        <tr><td>Cards:</td><td> @characterClass.NumberOfCards</td></tr>
        <tr><td>Level:</td><td><select @bind="characterLevel" class="form-control">
            @for (var level = 1; level <= 10; level++)
            {
                <option value="@level">@level</option>
            }
        </select></td></tr>
        <tr>
            <td><button @onclick="AddCardToPool">Add</button></td>
            <td>
                <select @bind="selectedAvailableCardId" class="form-control">
                    @foreach (var card in availableCards)
                    {
                    <option value="@card.Id">@card.Name (Level @card.Level, Id @card.Id)</option>
                    }
                </select>
            </td>
        </tr>
    </table>

    <button @onclick="Save">Save character</button>


    <h2>Card Pool</h2>

    @for (int row = 0; row <= poolCards.Count / cardsPerRow; row++)
    {
        <tr>

            @for (int col = 0; col < cardsPerRow; col++)
            {
                @if (row * cardsPerRow + col < poolCards.Count)
                {
                    var card = poolCards[row * cardsPerRow + col];
                    <td>
                        <div class="cardname">@card.Name</div>
                        <img class="cardimage" src="@card.ImagePath" />
                    </td>
                }
            }
        </tr>
    }
}

@code {

    private string characterIdParameter = "0";

    [Parameter]
    public string CharacterIdParameter
    {
        get
        {
            return characterIdParameter;
        }

        set
        {
            characterIdParameter = value;
            OnCharacterIdParameterChanged();
        }
    }

    private int cardsPerRow = 6;

    private Character character;

    private CharacterClass characterClass;

    private List<AbilityCard> poolCards;

    private List<AbilityCard> availableCards;

    private int characterLevel
    {
        get => character.Level;
        set
        {
            if (character.Level != value)
            {
                character.Level = value;
                OnCharacterLevelChanged();
            }
        }
    }

    private int selectedAvailableCardId;


    private void OnCharacterIdParameterChanged()
    {
        if (!int.TryParse(CharacterIdParameter, out int _id))
        {
            _id = 0;
        }

        character = CharacterService.GetCharacter(_id);
        characterClass = ClassService.GetClass(character.ClassId);

        UpdatePoolCards();
        UpdateAvailableCards();
    }

    private void UpdatePoolCards()
    {
        var tempCards = new List<AbilityCard>(character.PoolCards);
        tempCards.ForEach(c => c.IsSelected = character.SelectedCards.Any(card => card.Id == c.Id));
        poolCards = tempCards;
    }

    private void UpdateAvailableCards()
    {
        availableCards = CardService.GetAvailableCards(character).ToList();
        selectedAvailableCardId = availableCards.First().Id;
    }

    private void OnCharacterLevelChanged() => UpdateAvailableCards();

    private void AddCardToPool()
    {
        var tempCards = new List<AbilityCard>(character.PoolCards);
        tempCards.Add(CardService.GetCard(selectedAvailableCardId));
        character.PoolCards = tempCards;
        UpdatePoolCards();
        UpdateAvailableCards();
    }

    private void Save()
    {
        character.SelectedCards = new List<AbilityCard>(poolCards.Where(c => c.IsSelected));
        CharacterService.UpdateCharacter(character);
    }
}