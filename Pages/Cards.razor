@page "/cards/{ClassAsString}"

@using GloomhavenAbilityManager.Data
@inject IAbilityCardService CardService

<h1>Ability cards (@ClassToString(CharacterClass))</h1>

@if (cards == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Class</th>
                <th>Name</th>
                <th>Level</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var card in cards)
            {
                <tr>
                    <td>@ClassToString(card.Class)</td>
                    <td>@card.Name</td>
                    <td>@card.Level</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<AbilityCardInfo> cards;
    
    [Parameter]
    public string  ClassAsString {get; set; } = "All";

    public CharacterClass CharacterClass
    {
        get
        {
            if (Enum.TryParse(ClassAsString, out CharacterClass characterClass))
            {
                return characterClass;
            }

            return CharacterClass.All;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        cards = await CardService.GetCardsAsync(CharacterClass);
    }

    private string ClassToString(CharacterClass characterClass)
    {
        switch (characterClass)
        {
            case CharacterClass.Cragheart : return "Felsenherz";
            case CharacterClass.Tinkerer : return "Tüftler";
        }

        return characterClass.ToString();
    }
}
